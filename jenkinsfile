pipeline {
    agent any

    environment {
        NODEJS_VERSION = '14' // Specify Node.js version
        DOCKER_IMAGE_NAME = 'my-nodejs-app' // Specify your Docker image name
        NEXUS_REPO_URL = 's001elk2.konsalt.info:5555' // Specify Nexus repository URL
        OPENSHIFT_PROJECT = 'mywebapp2' // Specify your OpenShift project
        IMAGE_TAG = '1.8'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        

        stage('Build Docker Image') {
            steps {
                // Build Docker image
                sh "docker build -t $DOCKER_IMAGE_NAME:$IMAGE_TAG ."
                sh "docker tag $DOCKER_IMAGE_NAME:$IMAGE_TAG $NEXUS_REPO_URL/$DOCKER_IMAGE_NAME:$IMAGE_TAG"
            }
        }

        stage('Push to Nexus') {
            steps {
                // Log in to Nexus repository
                withCredentials([usernamePassword(credentialsId: 'b8a4eefc-c6dd-49ac-b1e3-ae1c1efb5dad', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                    sh "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $NEXUS_REPO_URL"
                }
                // Push Docker image to Nexus repository
                sh "docker push $NEXUS_REPO_URL/$DOCKER_IMAGE_NAME:$IMAGE_TAG"
            }
        }

        stage('Deploy to OpenShift') {
            steps {
                // Log in to OpenShift
                withCredentials([usernamePassword(credentialsId: '25c57432-cd22-4ad7-abcf-5d69a610a005', usernameVariable: 'OPENSHIFT_USERNAME', passwordVariable: 'OPENSHIFT_PASSWORD')]) {
                    sh "oc login -u $OPENSHIFT_USERNAME -p $OPENSHIFT_PASSWORD https://openshift.example.com"
                }
                // Deploy application to OpenShift
                sh "oc project $OPENSHIFT_PROJECT"
                sh "oc apply -f openshift-deployment.yaml"
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded! Application deployed successfully.'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
    }
}
