pipeline {
     agent {
        kubernetes {
            label 'ocp4dev' // Replace 'your-kubernetes-label' with the label assigned to your Kubernetes agent
            defaultContainer 'jenkins' // Replace 'your-container-template-name' with the name of your container template
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: ocdockerclient
spec:
  containers:
  - name: mydocker
    image: docker:24.0.0-rc.1-dind
    securityContext:
      privileged: true
    command:
    - cat
    tty: true
    volumeMounts:
      - name: docker-socket
        mountPath: /var/run/docker.sock
    securityContext:
      runAsUser: 0
  - name: occlientdockerclient
    image: 's001elk2.konsalt.info:5555/jenkins-git-oc-agent-rhel8:1.1'
    command:
    - cat
    tty: true
  volumes:
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
"""
        }
    }

    environment {
        NODEJS_VERSION = '14'
        DOCKER_IMAGE_NAME = 'my-nodejs-app'
        NEXUS_REPO_URL = 's001elk2.konsalt.info:5555'
        OPENSHIFT_PROJECT = 'mywebapp' 
        IMAGE_TAG = '1.14'
        OPENSHIFT_API = 'api.ocp4dev.konsalt.info:6443'
        DEPLOYMENT_FILE = 'deployment/deployment-mywebapp.yaml'
        IMAGE_NAME = "$NEXUS_REPO_URL/$DOCKER_IMAGE_NAME:$IMAGE_TAG"
    }

   stages {
     //   stage('Checkout') {
       //     steps {
         //       container('occlientdockerclient') {
           //     checkout scm
             //   }
           // }
        //}

stage('test') {
            steps {
                container('mydocker') {
                sh "sleep 300"
                }
            }
        }
        

        stage('Build Docker Image') {
            steps {
                container('occlientdockerclient') {
                // Build Docker image
                sh "docker build -t $DOCKER_IMAGE_NAME:$IMAGE_TAG ."
                sh "docker podman tag $DOCKER_IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME"
                }
            }
        }

        stage('Push to Nexus') {
            steps {
                container('occlientdockerclient') {
                // Log in to Nexus repository
                withCredentials([usernamePassword(credentialsId: 'b8a4eefc-c6dd-49ac-b1e3-ae1c1efb5dad', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                    sh "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $NEXUS_REPO_URL"
                }
                // Push Docker image to Nexus repository
                sh "docker push $IMAGE_NAME"
            }
            }
        }
        stage('Replace Image Name') {
            steps {
                script {
                    // Replace the image name in the deployment YAML file
                    sh "sed -i 's|my-nodejs-app|my-nodejs-app:$IMAGE_TAG|g' $DEPLOYMENT_FILE"
                }
            }
        }
        stage('Deploy to OpenShift') {
            steps {
                // Log in to OpenShift
                withCredentials([usernamePassword(credentialsId: '25c57432-cd22-4ad7-abcf-5d69a610a005', usernameVariable: 'OPENSHIFT_USERNAME', passwordVariable: 'OPENSHIFT_PASSWORD')]) {
                    sh "oc login -u $OPENSHIFT_USERNAME -p $OPENSHIFT_PASSWORD $OPENSHIFT_API --insecure-skip-tls-verify"
                }
                // Deploy application to OpenShift
                sh "oc project $OPENSHIFT_PROJECT"
                sh "oc apply -f deployment/registrypullsecret.yaml"
                sh "oc apply -f deployment/mywebdata.pvc.yaml"
                sh "oc apply -f deployment/hashicorp-sp.yaml"
                sh "oc apply -f deployment/mywebapp.yaml"
                sh "oc apply -f $DEPLOYMENT_FILE"
                sh "oc apply -f deployment/mywebapp-service.yaml"
                sh "oc apply -f deployment/mywebapp-route.yaml"
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded! Application deployed successfully.'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
    }
}
