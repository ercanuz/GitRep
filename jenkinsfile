pipeline {
    //agent any
agent {
         kubernetes {
             label 'ocp4dev' // Replace 'your-kubernetes-label' with the label assigned to your Kubernetes agent
             defaultContainer 'jenkins' // Replace 'your-container-template-name' with the name of your container template
             yaml """
 apiVersion: v1
 kind: Pod
 metadata:
   labels:
     jenkins: ocdockerclient
 spec:
   containers:
   - name: occlientdockerclient
     image: 's001elk2.konsalt.info:5555/jenkins-git-oc-agent-rhel8:1.1'
     command:
     - cat
     tty: true
   - name: dind
     image: s001elk2.konsalt.info:5555/mydockerdind:1.0
     volumeMounts:
       - name: dind-storage
         mountPath: /var/lib/docker
   volumes:
     - name: dind-storage
       emptyDir: {}
 """
         }
     }
    environment {
        NODEJS_VERSION = '14'
        DOCKER_IMAGE_NAME = 'my-nodejs-app'
        NEXUS_REPO_URL = 's001elk2.konsalt.info:5555'
        OPENSHIFT_PROJECT = 'mywebapp'
        IMAGE_TAG = "${env.BUILD_ID}-${env.GIT_COMMIT}"
        OPENSHIFT_API = 'api.konsno.konsalt.info:6443'
        DEPLOYMENT_FILE = 'deployment/deployment-mywebapp.yaml'
        IMAGE_REPO = "$NEXUS_REPO_URL/$DOCKER_IMAGE_NAME"
        IMAGE_NAME = "$NEXUS_REPO_URL/$DOCKER_IMAGE_NAME:$IMAGE_TAG"
        GIT_TOKEN = credentials('my_git')
    }

    stages {
        stage('Clone Repository') {
            steps {
                dir('GitRepoDir') {
                    script {
                        if (fileExists('GitRep')) {
                            dir('GitRep') {
                                sh 'git pull'
                               // sh 'git checkout staging'
                            }
                        } else {
                            sh 'git clone -b staging https://$GIT_TOKEN@github.com/ercanuz/GitRep'
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('GitRepoDir/GitRep') {
                    withCredentials([usernamePassword(credentialsId: 'b8a4eefc-c6dd-49ac-b1e3-ae1c1efb5dad', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                        sh "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $NEXUS_REPO_URL"
                    }
                    sh "docker build -t $DOCKER_IMAGE_NAME:$IMAGE_TAG ."
                    sh "docker image tag $DOCKER_IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME"
                }
            }
        }

        stage('Push to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'b8a4eefc-c6dd-49ac-b1e3-ae1c1efb5dad', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                    sh "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $NEXUS_REPO_URL"
                }
                sh "docker push $IMAGE_NAME"
            }
        }

        stage('Replace Image Name') {
            steps {
                dir('GitRepoDir/GitRep') {
                    
                        script {
                    // Print the original YAML file for debugging
                    sh "echo 'Original YAML file:'"
                    sh "cat deployment/deployment-mywebapp.yaml"
                    
                    // Perform the replacement
                    sh """
                    sed -i 's#image: \\"${IMAGE_REPO}:.*\\"#image: \\"${IMAGE_REPO}:${IMAGE_TAG}\\"#' deployment/deployment-mywebapp.yaml
                    """

                    // Print the modified YAML file for debugging
                    sh "echo 'Modified YAML file:'"
                    sh "cat deployment/deployment-mywebapp.yaml"
                }
                    
                }
            }
        }

        stage('Commit and Push Changes') {
            steps {
                dir('GitRepoDir/GitRep') {
                    script {
                        sh 'git config --global user.email "ercan.uzundal@konsalt.com.tr"'
                        sh 'git remote set-url origin https://$GIT_TOKEN@github.com/ercanuz/GitRep.git'
                        sh 'git add -A'
                        sh 'git commit -am "Updated Version"'
                        sh 'git pull origin staging --rebase'
                        sh 'git push origin staging'
                    }
                }
            }
        }
    stage('Deploy to OpenShift') {
            steps {
                
                // Log in to OpenShift
                withCredentials([usernamePassword(credentialsId: '25c57432-cd22-4ad7-abcf-5d69a610a005', usernameVariable: 'OPENSHIFT_USERNAME', passwordVariable: 'OPENSHIFT_PASSWORD')]) {
                    sh "oc login -u $OPENSHIFT_USERNAME -p $OPENSHIFT_PASSWORD $OPENSHIFT_API --insecure-skip-tls-verify"
                }
                // Deploy application to OpenShift
                sh "oc project $OPENSHIFT_PROJECT"
                sh "oc apply -f deployment/registrypullsecret.yaml"
                sh "oc apply -f deployment/mywebdata.pvc.yaml"
                sh "oc apply -f deployment/hashicorp-sp.yaml"
                sh "oc apply -f deployment/create_mywebapp_secret_via_hcp.yaml"
                sh "oc apply -f $DEPLOYMENT_FILE"
                sh "oc apply -f deployment/mywebapp-service.yaml"
                sh "oc apply -f deployment/mywebapp-route.yaml"
            
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded! Application deployed successfully.'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
    }
}
