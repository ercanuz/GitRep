pipeline {
    agent any
//     agent {
//        kubernetes {
//            label 'ocp4dev' // Replace 'your-kubernetes-label' with the label assigned to your Kubernetes agent
//            defaultContainer 'jenkins' // Replace 'your-container-template-name' with the name of your container template
//            yaml """
//apiVersion: v1
//kind: Pod
//metadata:
//  labels:
//    jenkins: ocdockerclient
//spec:
//  containers:
//  - name: occlientdockerclient
//    image: 's001elk2.konsalt.info:5555/jenkins-git-oc-agent-rhel8:1.1'
//    command:
//    - cat
//    tty: true
//  - name: dind
//    image: s001elk2.konsalt.info:5555/mydockerdind:1.0
//    securityContext:
//      privileged: true
//    volumeMounts:
//      - name: dind-storage
//        mountPath: /var/lib/docker
//  volumes:
//    - name: dind-storage
//      emptyDir: {}
//"""
//        }
//    }

    environment {
        NODEJS_VERSION = '14'
        DOCKER_IMAGE_NAME = 'my-nodejs-app'
        NEXUS_REPO_URL = 's001elk2.konsalt.info:5555'
        OPENSHIFT_PROJECT = 'mywebapp' 
        IMAGE_TAG = "${env.BUILD_ID}-${env.GIT_COMMIT}"
        OPENSHIFT_API = 'api.konsno.konsalt.info:6443'
        DEPLOYMENT_FILE = 'deployment/deployment-mywebapp.yaml'
        IMAGE_NAME = "$NEXUS_REPO_URL/$DOCKER_IMAGE_NAME:$IMAGE_TAG"
        GIT_TOKEN = credentials('my_git')
    }

   
//stage('copy certificate') {
  //        steps {
    //        container('dind') {
      //          sh  "mkdir -p /etc/docker/certs.d/s001elk2.konsalt.info:5555"
        //        sh  "cp certificate/Konsalt-CA.crt /etc/docker/certs.d/s001elk2.konsalt.info:5555"
          //      sh  "cd /etc/docker/certs.d/s001elk2.konsalt.info:5555"
            //    sh  "mv Konsalt-CA.crt ca.crt"   
              //           }
     // }
     //}
       stages {

        stage('pull/clone image') {
          steps {
           
                    checkout scm
                    sh 'git checkout staging'
                            
      }
     }

        stage('Build Docker Image') {
            steps {
                
                // Build Docker image
                withCredentials([usernamePassword(credentialsId: 'b8a4eefc-c6dd-49ac-b1e3-ae1c1efb5dad', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                    sh "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $NEXUS_REPO_URL"
                }
                sh "docker build -t $DOCKER_IMAGE_NAME:$IMAGE_TAG ."
                sh "docker image tag $DOCKER_IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME"
                
            }
        }

        stage('Push to Nexus') {
            steps {
                
                // Log in to Nexus repository
                withCredentials([usernamePassword(credentialsId: 'b8a4eefc-c6dd-49ac-b1e3-ae1c1efb5dad', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                    sh "docker login -u $NEXUS_USERNAME -p $NEXUS_PASSWORD $NEXUS_REPO_URL"
                }
                // Push Docker image to Nexus repository
                sh "docker push $IMAGE_NAME"
            
            }
        }
        
       
        stage('Replace Image Name') {
            steps {
                
                script {
                    // Replace the image name in the deployment YAML file
                    //sh "sed -i 's|my-nodejs-app*|my-nodejs-app:$IMAGE_TAG|g' $DEPLOYMENT_FILE"
                    sh "sed -i 's#my-nodejs-app:.*#my-nodejs-app:$IMAGE_TAG#' $DEPLOYMENT_FILE"
                }
            }
            }
    stage('Commit and Push'){
        steps {
                sh 'git config --global user.email "ercan.uzundal@konsalt.com.tr"'
                sh 'git remote set-url origin https://$GIT_TOKEN@github.com/ercanuz/GitRep.git'
                sh 'git checkout staging'
                sh 'git add -A'
                sh 'git commit -am "Updated Version"'
                sh 'git push origin staging'
        }

    }

    }

    post {
        success {
            echo 'Pipeline succeeded! Application deployed successfully.'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
    }
}
